import os
import re
import numpy as np
import matplotlib.pyplot as plt

#plt.rcParams["font.family"] = "Palatino"
plt.rcParams["font.family"] = "Palatino Linotype"
def process_data(data_folder):
    garage_data = {}

    garage_pattern = re.compile(r"Garage ([A-Z0-9 ]+):")
    max_vans_pattern = re.compile(r"Maximum vans out simultaneously: (\d+)")
    total_breakdowns_pattern = re.compile(r"Total breakdowns: (\d+)")
    avg_job_time_pattern = re.compile(r"Average total job time: (\d+)")

    for filename in os.listdir(data_folder):
        if filename.endswith(".txt"):  # Process only text files
            with open(os.path.join(data_folder, filename), "r") as file:
                current_garage = None
                for line in file:
                    garage_match = garage_pattern.search(line)
                    if garage_match:
                        current_garage = garage_match.group(1)
                        if current_garage not in garage_data:
                            garage_data[current_garage] = {"max_vans": [], "total_breakdowns": [], "avg_job_time": []}

                    max_vans_match = max_vans_pattern.search(line)
                    if max_vans_match and current_garage:
                        garage_data[current_garage]["max_vans"].append(int(max_vans_match.group(1)))

                    total_breakdowns_match = total_breakdowns_pattern.search(line)
                    if total_breakdowns_match and current_garage:
                        garage_data[current_garage]["total_breakdowns"].append(int(total_breakdowns_match.group(1)))

                    avg_job_time_match = avg_job_time_pattern.search(line)
                    if avg_job_time_match and current_garage:
                        garage_data[current_garage]["avg_job_time"].append(int(avg_job_time_match.group(1)))

    return garage_data


def compute_means(garage_data):
    garages = []
    max_vans_means = []
    total_breakdowns_means = []
    avg_job_time_means = []

    for garage, values in garage_data.items():
        garages.append(garage)
        max_vans_means.append(np.mean(values["max_vans"]) if values["max_vans"] else 0)
        total_breakdowns_means.append(np.mean(values["total_breakdowns"]) if values["total_breakdowns"] else 0)
        avg_job_time_means.append(np.mean(values["avg_job_time"]) if values["avg_job_time"] else 0)

    return garages, max_vans_means, total_breakdowns_means, avg_job_time_means


def plot_comparison(garages, data1, data2, label1, label2, title, ylabel, colors):
    x = np.arange(len(garages))
    bar_width = 0.35

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.bar(x - bar_width / 2, data1, bar_width, label=label1, color=colors[0])
    ax.bar(x + bar_width / 2, data2, bar_width, label=label2, color=colors[1])
    plt.plot(x, np.mean(data1)*np.ones(len(x)), label="Optimised average", color=colors[0])
    plt.plot(x, np.mean(data2)*np.ones(len(x)), label="Original average", color=colors[1])
    ax.set_xlabel("Garages", fontsize=15)
    ax.set_ylabel(ylabel, fontsize=15)
    ax.set_title(title, fontsize=20)
    ax.set_xticks(x)
    ax.set_xticklabels(garages, rotation=90)
    ax.legend(fontsize=15)
    ax.grid(axis="y", linestyle="--", alpha=0.7)

    plt.tight_layout()
    plt.show()

def plottime_comparison(garages, data1, data2, data3, data4, label1, label2, title, ylabel, colors):
    x = np.arange(len(garages))
    bar_width = 0.35
    data11=np.array(data1)
    data22=np.array(data2)
    data33=np.array(data3)
    data44=np.array(data4)
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.bar(x - bar_width / 2, data1, bar_width, label=label1, color=colors[0])
    ax.bar(x + bar_width / 2, data2, bar_width, label=label2, color=colors[1])
    plt.plot(x, 61.73*np.ones(len(x)), label="Optimised average", color=colors[0])
    plt.plot(x, 63.06*np.ones(len(x)), label="Original average", color=colors[1])
    ax.set_xlabel("Garages", fontsize=15)
    ax.set_ylabel(ylabel, fontsize=15)
    ax.set_title(title, fontsize=20)
    ax.set_xticks(x)
    ax.set_xticklabels(garages, rotation=90)
    ax.legend(fontsize=15)
    ax.grid(axis="y", linestyle="--", alpha=0.7)

    plt.tight_layout()
    plt.show()

# Define both data folders
# data_folder_1 = "Results"
# data_folder_2 = "resultsoriginal"

data_folder_1 = "optimised"
data_folder_2 = "original"
data_1 = process_data(data_folder_1)
data_2 = process_data(data_folder_2)

garages_1, max_vans_1, total_breakdowns_1, avg_job_time_1 = compute_means(data_1)
garages_2, max_vans_2, total_breakdowns_2, avg_job_time_2 = compute_means(data_2)

# Ensure both datasets have the same garages for comparison
common_garages = sorted(set(garages_1) & set(garages_2))


def get_common_data(garages, reference_garages, data):
    return [data[reference_garages.index(garage)] if garage in reference_garages else 0 for garage in common_garages]


max_vans_1_common = get_common_data(common_garages, garages_1, max_vans_1)
max_vans_2_common = get_common_data(common_garages, garages_2, max_vans_2)
total_breakdowns_1_common = get_common_data(common_garages, garages_1, total_breakdowns_1)
total_breakdowns_2_common = get_common_data(common_garages, garages_2, total_breakdowns_2)
avg_job_time_1_common = get_common_data(common_garages, garages_1, avg_job_time_1)
avg_job_time_2_common = get_common_data(common_garages, garages_2, avg_job_time_2)

# Plot comparisons
plot_comparison(common_garages, max_vans_1_common, max_vans_2_common, "Optimised Results", "Original Results",
                "Maximum Vans Out Comparison", "Mean Count", ["purple", "limegreen"])
plot_comparison(common_garages, total_breakdowns_1_common, total_breakdowns_2_common, "Optimised Results", "Original Results",
                "Total Breakdowns Comparison", "Mean Count", ["purple", "limegreen"])
plottime_comparison(common_garages, avg_job_time_1_common, avg_job_time_2_common, total_breakdowns_1_common, total_breakdowns_2_common, "Optimised Results", "Original Results",
                "Average Service Time Comparison", "Mean Time (mins)", ["purple", "limegreen"])
